/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var ChannelId_pb = require('./ChannelId_pb.js');
goog.exportSymbol('proto.tv.uob.grpc.InitialChannelStatusData', null, global);
goog.exportSymbol('proto.tv.uob.grpc.ListActiveLiveStreamResponse', null, global);
goog.exportSymbol('proto.tv.uob.grpc.LiveChannelStatus', null, global);
goog.exportSymbol('proto.tv.uob.grpc.UpdateStreamStatusRequest', null, global);
goog.exportSymbol('proto.tv.uob.grpc.UpdateStreamStatusResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tv.uob.grpc.LiveChannelStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tv.uob.grpc.LiveChannelStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tv.uob.grpc.LiveChannelStatus.displayName = 'proto.tv.uob.grpc.LiveChannelStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tv.uob.grpc.LiveChannelStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.tv.uob.grpc.LiveChannelStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tv.uob.grpc.LiveChannelStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.LiveChannelStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    streamkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    islive: jspb.Message.getFieldWithDefault(msg, 3, false),
    started: jspb.Message.getFieldWithDefault(msg, 4, 0),
    playbackurl: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tv.uob.grpc.LiveChannelStatus}
 */
proto.tv.uob.grpc.LiveChannelStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tv.uob.grpc.LiveChannelStatus;
  return proto.tv.uob.grpc.LiveChannelStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tv.uob.grpc.LiveChannelStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tv.uob.grpc.LiveChannelStatus}
 */
proto.tv.uob.grpc.LiveChannelStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamkey(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarted(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaybackurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tv.uob.grpc.LiveChannelStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tv.uob.grpc.LiveChannelStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tv.uob.grpc.LiveChannelStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.LiveChannelStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStreamkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIslive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStarted();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPlaybackurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int64 channelid = 1;
 * @return {number}
 */
proto.tv.uob.grpc.LiveChannelStatus.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tv.uob.grpc.LiveChannelStatus.prototype.setChannelid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string streamKey = 2;
 * @return {string}
 */
proto.tv.uob.grpc.LiveChannelStatus.prototype.getStreamkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tv.uob.grpc.LiveChannelStatus.prototype.setStreamkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isLive = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tv.uob.grpc.LiveChannelStatus.prototype.getIslive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.tv.uob.grpc.LiveChannelStatus.prototype.setIslive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 started = 4;
 * @return {number}
 */
proto.tv.uob.grpc.LiveChannelStatus.prototype.getStarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tv.uob.grpc.LiveChannelStatus.prototype.setStarted = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string playbackURL = 5;
 * @return {string}
 */
proto.tv.uob.grpc.LiveChannelStatus.prototype.getPlaybackurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.tv.uob.grpc.LiveChannelStatus.prototype.setPlaybackurl = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tv.uob.grpc.InitialChannelStatusData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tv.uob.grpc.InitialChannelStatusData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tv.uob.grpc.InitialChannelStatusData.displayName = 'proto.tv.uob.grpc.InitialChannelStatusData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.toObject = function(opt_includeInstance) {
  return proto.tv.uob.grpc.InitialChannelStatusData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tv.uob.grpc.InitialChannelStatusData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.InitialChannelStatusData.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    streamkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playbackurl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tv.uob.grpc.InitialChannelStatusData}
 */
proto.tv.uob.grpc.InitialChannelStatusData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tv.uob.grpc.InitialChannelStatusData;
  return proto.tv.uob.grpc.InitialChannelStatusData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tv.uob.grpc.InitialChannelStatusData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tv.uob.grpc.InitialChannelStatusData}
 */
proto.tv.uob.grpc.InitialChannelStatusData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaybackurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tv.uob.grpc.InitialChannelStatusData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tv.uob.grpc.InitialChannelStatusData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.InitialChannelStatusData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStreamkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlaybackurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 channelid = 1;
 * @return {number}
 */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.setChannelid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string streamKey = 2;
 * @return {string}
 */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.getStreamkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.setStreamkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string playbackURL = 3;
 * @return {string}
 */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.getPlaybackurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tv.uob.grpc.InitialChannelStatusData.prototype.setPlaybackurl = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tv.uob.grpc.UpdateStreamStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tv.uob.grpc.UpdateStreamStatusRequest.displayName = 'proto.tv.uob.grpc.UpdateStreamStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tv.uob.grpc.UpdateStreamStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tv.uob.grpc.UpdateStreamStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    islive: jspb.Message.getFieldWithDefault(msg, 2, false),
    started: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tv.uob.grpc.UpdateStreamStatusRequest}
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tv.uob.grpc.UpdateStreamStatusRequest;
  return proto.tv.uob.grpc.UpdateStreamStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tv.uob.grpc.UpdateStreamStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tv.uob.grpc.UpdateStreamStatusRequest}
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslive(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tv.uob.grpc.UpdateStreamStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tv.uob.grpc.UpdateStreamStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIslive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStarted();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 channelId = 1;
 * @return {number}
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.setChannelid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool isLive = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.getIslive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.setIslive = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 started = 3;
 * @return {number}
 */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.getStarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tv.uob.grpc.UpdateStreamStatusRequest.prototype.setStarted = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tv.uob.grpc.UpdateStreamStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tv.uob.grpc.UpdateStreamStatusResponse.displayName = 'proto.tv.uob.grpc.UpdateStreamStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tv.uob.grpc.UpdateStreamStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tv.uob.grpc.UpdateStreamStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updated: jspb.Message.getFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tv.uob.grpc.UpdateStreamStatusResponse}
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tv.uob.grpc.UpdateStreamStatusResponse;
  return proto.tv.uob.grpc.UpdateStreamStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tv.uob.grpc.UpdateStreamStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tv.uob.grpc.UpdateStreamStatusResponse}
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdated(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tv.uob.grpc.UpdateStreamStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tv.uob.grpc.UpdateStreamStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool updated = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.prototype.getUpdated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.tv.uob.grpc.UpdateStreamStatusResponse.prototype.setUpdated = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.tv.uob.grpc.UpdateStreamStatusResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tv.uob.grpc.UpdateStreamStatusResponse.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tv.uob.grpc.ListActiveLiveStreamResponse.repeatedFields_, null);
};
goog.inherits(proto.tv.uob.grpc.ListActiveLiveStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tv.uob.grpc.ListActiveLiveStreamResponse.displayName = 'proto.tv.uob.grpc.ListActiveLiveStreamResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tv.uob.grpc.ListActiveLiveStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tv.uob.grpc.ListActiveLiveStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.tv.uob.grpc.LiveChannelStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tv.uob.grpc.ListActiveLiveStreamResponse}
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tv.uob.grpc.ListActiveLiveStreamResponse;
  return proto.tv.uob.grpc.ListActiveLiveStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tv.uob.grpc.ListActiveLiveStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tv.uob.grpc.ListActiveLiveStreamResponse}
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tv.uob.grpc.LiveChannelStatus;
      reader.readMessage(value,proto.tv.uob.grpc.LiveChannelStatus.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tv.uob.grpc.ListActiveLiveStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tv.uob.grpc.ListActiveLiveStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tv.uob.grpc.LiveChannelStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LiveChannelStatus channels = 1;
 * @return {!Array.<!proto.tv.uob.grpc.LiveChannelStatus>}
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.prototype.getChannelsList = function() {
  return /** @type{!Array.<!proto.tv.uob.grpc.LiveChannelStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tv.uob.grpc.LiveChannelStatus, 1));
};


/** @param {!Array.<!proto.tv.uob.grpc.LiveChannelStatus>} value */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.prototype.setChannelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tv.uob.grpc.LiveChannelStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tv.uob.grpc.LiveChannelStatus}
 */
proto.tv.uob.grpc.ListActiveLiveStreamResponse.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tv.uob.grpc.LiveChannelStatus, opt_index);
};


proto.tv.uob.grpc.ListActiveLiveStreamResponse.prototype.clearChannelsList = function() {
  this.setChannelsList([]);
};


goog.object.extend(exports, proto.tv.uob.grpc);
